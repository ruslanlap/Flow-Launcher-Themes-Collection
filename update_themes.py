#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
import time
import json
import hashlib
import unicodedata
from dataclasses import dataclass, asdict
from typing import List, Dict, Optional, Tuple
import requests

# ---------------------------
# Config
# ---------------------------

OWNER = "Flow-Launcher"
REPO = "Flow.Launcher"
DISCUSSION_NUMBER = 1438
README_PATH = "README.md"

# –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —Ç–æ–∫–µ–Ω—ñ–≤: GITHUB_TOKEN (–∑–∞–≤–∂–¥–∏ —î –≤ Actions) -> PAT_TOKEN (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
GITHUB_TOKEN = os.environ.get("GITHUB_TOKEN") or os.environ.get("PAT_TOKEN")
if not GITHUB_TOKEN:
    raise SystemExit("‚ùå No token found. Provide GITHUB_TOKEN (preferred) or PAT_TOKEN.")

HEADERS = {
    "Authorization": f"Bearer {GITHUB_TOKEN}",
    "Accept": "application/vnd.github+json",
}

GRAPHQL_API = "https://api.github.com/graphql"

# ---------------------------
# Models
# ---------------------------

@dataclass
class Theme:
    name: str
    xaml_files: List[str]
    download_link: str
    author: str
    has_image: bool

# ---------------------------
# Helpers
# ---------------------------

def _normalize_text(s: str) -> str:
    """Trim, collapse spaces, normalize unicode width/compatibility."""
    s = unicodedata.normalize("NFKC", s or "")
    s = s.replace("\u200b", "").strip()
    # –£–±—Ä–∞—Ç–∏ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
    s = re.sub(r"\s+", " ", s)
    return s

def _to_raw_github_url(url: str) -> str:
    """
    –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î github.com/.../blob/<branch>/path/file.xaml -> raw.githubusercontent.com/.../<branch>/path/file.xaml
    –Ø–∫—â–æ –≤–∂–µ raw –∞–±–æ –Ω–µ –ø—ñ–¥–ø–∞–¥–∞—î –ø—ñ–¥ —à–∞–±–ª–æ–Ω ‚Äî –ø–æ–≤–µ—Ä—Ç–∞—î —è–∫ —î.
    """
    if "raw.githubusercontent.com" in url:
        return url
    m = re.match(r"https://github\.com/([^/]+)/([^/]+)/blob/([^/]+)/(.*\.xaml)$", url)
    if m:
        owner, repo, branch, path = m.groups()
        return f"https://raw.githubusercontent.com/{owner}/{repo}/{branch}/{path}"
    return url

def _extract_urls_from_text(text: str) -> List[str]:
    # –ü—Ä–æ—Å—Ç–µ–Ω—å–∫–∏–π –µ–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä URL –∑ plain text
    return re.findall(r"https?://[^\s)>\]}\"']+", text or "", flags=re.IGNORECASE)

def _extract_href_urls_from_html(html: str) -> List[str]:
    # –í–∏—Ç—è–≥—É—î–º–æ href="..."; –Ω–µ HTML-–ø–∞—Ä—Å–µ—Ä, –∞–ª–µ –ø—Ä–∞—Ü—é—î –¥–ª—è –ø—Ä–æ—Å—Ç–∏—Ö –∫–µ–π—Å—ñ–≤
    return re.findall(r'href="([^"]+)"', html or "", flags=re.IGNORECASE)

def _dedupe_preserve_order(items: List[str]) -> List[str]:
    seen = set()
    out = []
    for it in items:
        if it not in seen:
            seen.add(it)
            out.append(it)
    return out

def _sha256(s: str) -> str:
    return hashlib.sha256(s.encode("utf-8")).hexdigest()

# ---------------------------
# GitHub GraphQL fetch (with pagination & retries)
# ---------------------------

def _graphql(query: str, variables: Optional[Dict] = None, max_retries: int = 5, backoff: float = 1.2) -> Dict:
    for attempt in range(1, max_retries + 1):
        resp = requests.post(GRAPHQL_API, headers=HEADERS, json={"query": query, "variables": variables or {}})
        # Rate-limit handling
        if resp.status_code == 200:
            data = resp.json()
            if "errors" in data and data["errors"]:
                # –Ø–∫—â–æ ‚Äúsecondary rate limit‚Äù, –¥–∞–º–æ –±–µ–∫–æ—Ñ—Ñ
                err_str = json.dumps(data["errors"], ensure_ascii=False)
                if "rate limit" in err_str.lower():
                    time.sleep(backoff * attempt)
                    continue
                raise RuntimeError(f"GraphQL errors: {err_str}")
            return data
        elif resp.status_code in (502, 503, 504, 429):
            time.sleep(backoff * attempt)
            continue
        else:
            raise RuntimeError(f"GraphQL HTTP {resp.status_code}: {resp.text}")
    raise RuntimeError("Exceeded retries for GraphQL request.")

def fetch_all_discussion_comments(owner: str, repo: str, number: int) -> List[Dict]:
    """
    –û—Ç—Ä–∏–º—É—î –í–°–Ü –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –∑ –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è (–∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é).
    –ü–æ–≤–µ—Ä—Ç–∞—î nodes (author/login, bodyText, bodyHTML, url, createdAt).
    """
    query = """
    query($owner:String!, $repo:String!, $number:Int!, $after:String) {
      repository(owner:$owner, name:$repo) {
        discussion(number: $number) {
          title
          comments(first: 100, after: $after) {
            nodes {
              author { login }
              bodyText
              bodyHTML
              url
              createdAt
            }
            pageInfo {
              hasNextPage
              endCursor
            }
          }
        }
      }
    }
    """
    comments: List[Dict] = []
    after = None
    while True:
        data = _graphql(query, {"owner": owner, "repo": repo, "number": number, "after": after})
        node = data["data"]["repository"]["discussion"]
        if not node:
            break
        batch = node["comments"]["nodes"] or []
        comments.extend(batch)
        pi = node["comments"]["pageInfo"]
        if pi["hasNextPage"]:
            after = pi["endCursor"]
        else:
            break
    return comments

# ---------------------------
# Extraction logic
# ---------------------------

def extract_theme_info(comments: List[Dict]) -> List[Theme]:
    """
    –í–∏—Ç—è–≥—É—î —Ç–µ–º–∏:
      - name: –ø–µ—Ä—à–∏–π ‚Äú–ª—é–¥—Å—å–∫–∏–π‚Äù —Ä—è–¥–æ–∫ (>=3 —Å–ª–æ–≤–∞), –±–µ–∑ .xaml; fallback ‚Äî –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫
      - xaml_files: —É–Ω—ñ–∫–∞–ª—å–Ω—ñ .xaml —ñ–∑ bodyHTML/bodyText; –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è + raw URLs
      - download_link: –ø–µ—Ä—à–µ –≤–∞–ª—ñ–¥–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (repo –∞–±–æ raw), preference: —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π
      - author: login –∞–±–æ "Unknown"
      - has_image: –∑–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—é <img ...> —É bodyHTML
    """
    themes: List[Theme] = []
    seen_names = set()

    for c in comments:
        author = (c.get("author") or {}).get("login") or "Unknown"
        body_text = c.get("bodyText") or ""
        body_html = c.get("bodyHTML") or ""

        # 1) –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –ª—ñ–Ω–∫–∏
        urls = _dedupe_preserve_order(_extract_href_urls_from_html(body_html) + _extract_urls_from_text(body_text))

        # 2) –í–∏–¥—ñ–ª—è—î–º–æ .xaml
        xaml_links = []
        for u in urls:
            if u.lower().endswith(".xaml"):
                xaml_links.append(_to_raw_github_url(u))

        # 3) –†–µ–ø–æ-–ø–æ—Å–∏–ª–∞–Ω–Ω—è (–¥–ª—è ‚ÄúDownload‚Äù –∫—Ä–∞—â–µ –ø–æ–∫–∞–∑–∞—Ç–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π, —è–∫—â–æ —î)
        repo_links = []
        for u in urls:
            if re.match(r"^https://github\.com/[^/]+/[^/]+/?$", u):
                repo_links.append(u)

        # 4) –Ø–∫—â–æ –Ω–µ–º–∞ –Ω—ñ XAML, –Ω—ñ —Ä–µ–ø–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
        if not xaml_links and not repo_links:
            continue

        # 5) –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–∑–≤—É —Ç–µ–º–∏ (>=3 —Å–ª–æ–≤–∞ –±–µ–∑ .xaml)
        lines = [ln.strip() for ln in (body_text or "").splitlines() if ln.strip()]
        theme_name = None
        for ln in lines:
            candidate = _normalize_text(ln)
            if ".xaml" in candidate.lower():
                continue
            if len(candidate.split()) >= 3:
                theme_name = candidate
                break
        if not theme_name and lines:
            theme_name = _normalize_text(lines[0])

        if not theme_name:
            # –°–ø—Ä–∞–≤–¥—ñ –Ω—ñ—á–æ–≥–æ –æ—Å–º–∏—Å–ª–µ–Ω–æ–≥–æ
            continue

        # –ü—Ä–∏–±—Ä–∞—Ç–∏ –±—É–¥—å-—è–∫—ñ raw URL –∑ –Ω–∞–∑–≤–∏ (—ñ–Ω–∫–æ–ª–∏ –ª—é–¥–∏ –≤—Å—Ç–∞–≤–ª—è—é—Ç—å —Ä—è–¥–æ–∫ –∑ –ª—ñ–Ω–∫–æ–º)
        theme_name = re.sub(r"https?://\S+", "", theme_name).strip()
        theme_key = theme_name.lower()

        if theme_key in seen_names:
            # –£–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—ñ–≤ —Ç–µ–º–∏ –∑–∞ —ñ–º‚Äô—è–º
            continue
        seen_names.add(theme_key)

        # 6) has_image
        has_image = "<img" in (body_html or "").lower()

        # 7) download_link: —Ä–µ–ø–æ –º–∞—î –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç, —ñ–Ω–∞–∫—à–µ –ø–µ—Ä—à–∏–π xaml
        download_link = repo_links[0] if repo_links else (xaml_links[0] if xaml_links else "")

        # 8) XAML file names (—É–Ω—ñ–∫–∞–ª—å–Ω—ñ, –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ)
        xaml_files_set = set()
        for link in xaml_links:
            m = re.search(r"/([^/]+\.xaml)$", link, flags=re.IGNORECASE)
            if m:
                file_name = _normalize_text(m.group(1))
                xaml_files_set.add(file_name)

        xaml_files = sorted(xaml_files_set)

        # –Ø–∫—â–æ –∑–æ–≤—Å—ñ–º –Ω–µ–º–∞—î .xaml ‚Äî –ø—Ä–∏–ø—É—Å—Ç–∏–º–æ –Ω–∞–∑–≤—É
        if not xaml_files:
            assumed = f"{theme_name}.xaml"
            xaml_files = [assumed]

        themes.append(Theme(
            name=theme_name,
            xaml_files=xaml_files,
            download_link=download_link,
            author=author,
            has_image=has_image,
        ))

    return themes

# ---------------------------
# README rendering (idempotent)
# ---------------------------

def render_readme(themes: List[Theme]) -> str:
    """–ì–µ–Ω–µ—Ä—É—î –ø–æ–≤–Ω–∏–π README (–ª–µ–≥–∫–æ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—É —Å–µ–∫—Ü—ñ—é –∑–∞ –º–∞—Ä–∫–µ—Ä–∞–º–∏)."""
    lines = []
    lines.append("# üé® Flow Launcher Themes Collection\n\n")
    lines.append(
        "This README aggregates theme submissions shared in the "
        "[Flow Launcher Theme Gallery discussion]"
        "(https://github.com/Flow-Launcher/Flow.Launcher/discussions/1438).\n\n"
    )
    lines.append(f"üì¶ **Total Themes:** {len(themes)}\n\n")
    lines.append("| üî¢ # | üé® Theme | üóÇ XAML File(s) | üì• Download | ‚úçÔ∏è Author | üñºÔ∏è Preview |\n")
    lines.append("|-----:|----------|------------------|-------------|-----------|-----------|\n")

    for idx, t in enumerate(themes, start=1):
        preview = "‚úÖ" if t.has_image else ""
        safe_name = t.name.replace("|", "\\|")
        xaml_join = ", ".join(t.xaml_files).replace("|", "\\|")
        download_cell = f"[Download]({t.download_link})" if t.download_link else ""
        author_cell = t.author

        lines.append(
            f"| {idx} | **{safe_name}** | {xaml_join} | {download_cell} | {author_cell} | {preview} |\n"
        )

    lines.append("\n---\n\n")
    lines.append(
        "*This README was automatically generated from the discussion posts on GitHub. "
        "For updates, please refer to the original "
        "[Flow Launcher Theme Gallery discussion]"
        "(https://github.com/Flow-Launcher/Flow.Launcher/discussions/1438).*\n"
    )
    return "".join(lines)

def write_if_changed(path: str, new_content: str) -> bool:
    """
    –ü–∏—à–µ —Ñ–∞–π–ª —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –∑–º—ñ–Ω–∏–≤—Å—è –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ –æ–Ω–æ–≤–ª–µ–Ω–æ.
    –¶–µ –∑–º–µ–Ω—à—É—î —à—É–º —É –∫–æ–º–º—ñ—Ç–∞—Ö —ñ –ø—Ä–∏—à–≤–∏–¥—à—É—î —Ä–∞–Ω.
    """
    old = ""
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            old = f.read()
    if _sha256(old) == _sha256(new_content):
        print("‚ÑπÔ∏è README unchanged (no write).")
        return False
    with open(path, "w", encoding="utf-8") as f:
        f.write(new_content)
    print("‚úÖ README updated.")
    return True

# ---------------------------
# Main
# ---------------------------

def main() -> int:
    print(f"‚¨áÔ∏è Fetching comments for {OWNER}/{REPO} discussion #{DISCUSSION_NUMBER} ...")
    comments = fetch_all_discussion_comments(OWNER, REPO, DISCUSSION_NUMBER)
    print(f"üìÑ Received {len(comments)} comment(s). Parsing themes...")

    themes = extract_theme_info(comments)
    # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —ñ–º–µ–Ω–µ–º (—Å—Ç–∞–±—ñ–ª—å–Ω–æ)
    themes.sort(key=lambda t: t.name.lower())

    # (–æ–ø—Ü—ñ–π–Ω–æ) –í–∏–≤–µ—Å—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø—ñ–¥—Å—É–º–æ–∫ —É –ª–æ–≥
    print(f"üéØ Parsed {len(themes)} theme(s). Example:\n" +
          json.dumps(asdict(themes[0]) if themes else {}, ensure_ascii=False, indent=2))

    readme = render_readme(themes)
    updated = write_if_changed(README_PATH, readme)
    print("üèÅ Done.")
    # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ 0 –∑–∞–≤–∂–¥–∏; CI-–ª–æ–≥—ñ–∫–∞ –≤–∏—Ä—ñ—à—É—î, –∫–æ–º—ñ—Ç–∏—Ç–∏ —á–∏ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ PR
    return 0

if __name__ == "__main__":
    raise SystemExit(main())
