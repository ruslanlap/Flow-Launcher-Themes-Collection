import os
import re
import requests
import unicodedata  # –î–ª—è "–Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó" —Ä—è–¥–∫—ñ–≤, —è–∫—â–æ —Ç–∞–º —î –ø—Ä–∏—Ö–æ–≤–∞–Ω—ñ —Å–∏–º–≤–æ–ª–∏

# Get GitHub token from environment variables
GITHUB_TOKEN = os.environ.get('PAT_TOKEN')
if not GITHUB_TOKEN:
    raise Exception("PAT_TOKEN not set. Add it as an environment variable.")

HEADERS = {"Authorization": f"Bearer {GITHUB_TOKEN}"}


def fetch_discussion_comments():
    """Fetch comments from the Flow Launcher Theme Gallery discussion"""
    query = """
    {
      repository(owner: "Flow-Launcher", name: "Flow.Launcher") {
        discussion(number: 1438) {
          title
          comments(first: 100) {
            nodes {
              author {
                login
              }
              bodyText
              bodyHTML
              url
              createdAt
            }
          }
        }
      }
    }
    """
    response = requests.post("https://api.github.com/graphql", json={"query": query}, headers=HEADERS)
    if response.status_code == 200:
        data = response.json()
        return data["data"]["repository"]["discussion"]["comments"]["nodes"]
    else:
        raise Exception(f"Query failed with code {response.status_code}: {response.text}")


def extract_theme_info(comments):
    """Extract theme information from comments with unique .xaml files per theme."""
    themes = []
    seen_names = set()

    for comment in comments:
        author = comment.get("author", {}).get("login", "Unknown")
        body_text = comment.get("bodyText", "")
        body_html = comment.get("bodyHTML", "")

        # 1) –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ .xaml
        #    - HTML-–ø–æ—Å–∏–ª–∞–Ω–Ω—è (href="...")
        #    - Markdown-–ø–æ—Å–∏–ª–∞–Ω–Ω—è ((...))
        #    - –ü—Ä—è–º—ñ –ª—ñ–Ω–∫–∏ –≤ —Ç–µ–∫—Å—Ç—ñ (https://...)
        xaml_links_html = re.findall(
            r'href="(https://(?:raw\.githubusercontent\.com|github\.com)/[^"]+\.xaml)"',
            body_html,
            flags=re.IGNORECASE
        )
        xaml_links_md = re.findall(
            r'ÓÄÅ(https://(?:raw\.githubusercontent\.com|github\.com)/[^)]+\.xaml)ÓÄÅ',
            body_html,
            flags=re.IGNORECASE
        )
        xaml_links_text = re.findall(
            r'(https?://[^\s]+\.xaml)',
            body_text,
            flags=re.IGNORECASE
        )

        # –£—Å—É–≤–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –ª—ñ–Ω–∫—ñ–≤ (set())
        xaml_links = list(set(xaml_links_html + xaml_links_md + xaml_links_text))

        # 2) –®—É–∫–∞—î–º–æ GitHub-–ø–æ—Å–∏–ª–∞–Ω–Ω—è (—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—ó)
        repo_links = re.findall(r'href="(https://github\.com/[^"]+)"', body_html)
        # –í—ñ–¥–∫–∏–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ issues, pulls, discussions, wiki
        repo_links = [
            link for link in repo_links
            if not re.search(r'/(issues|pulls|discussions|wiki)/?$', link)
        ]
        download_link = repo_links[0] if repo_links else ""

        # –Ø–∫—â–æ –Ω–µ–º–∞—î .xaml –ª—ñ–Ω–∫—ñ–≤ —ñ –Ω–µ–º–∞—î —Ä–µ–ø–æ-–ø–æ—Å–∏–ª–∞–Ω—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ
        if not (xaml_links or download_link):
            continue

        # 3) –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–∑–≤—É —Ç–µ–º–∏ (–ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ —ñ–∑ >= 3 —Å–ª–æ–≤–∞–º–∏, –±–µ–∑ ".xaml")
        lines = body_text.strip().split('\n')
        theme_name = None
        if lines:
            for line in lines:
                clean_line = line.strip()
                if clean_line and ".xaml" not in clean_line and len(clean_line.split()) >= 3:
                    theme_name = clean_line
                    break
            if not theme_name:
                # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ "–∞–¥–µ–∫–≤–∞—Ç–Ω–∏–π" —Ä—è–¥–æ–∫, –≤—ñ–∑—å–º–µ–º–æ –ø–µ—Ä—à–∏–π
                theme_name = lines[0].strip()

        if not theme_name:
            continue

        # –í–∏–¥–∞–ª—è—î–º–æ –∑ –Ω–∞–∑–≤–∏ —Ç–µ–º–∏ –≤—Å—ñ –∑–∞–π–≤—ñ —à—Ç—É–∫–∏, —Ç–∏–ø—É –ø–æ—Å–∏–ª–∞–Ω—å —ñ —Ç.–¥.
        theme_name = re.sub(r'ÓÄÅ|ÓÄÅ|ÓÄÅ|ÓÄÅ|http.*', '', theme_name, flags=re.IGNORECASE).strip()

        # 4) –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–∑–≤–∏ —Ç–µ–º–∏ (–Ω–µ –¥—É–±–ª—é—î–º–æ —Å–∞–º—É —Ç–µ–º—É)
        if theme_name.lower() in seen_names:
            continue
        seen_names.add(theme_name.lower())

        # 5) –ß–∏ —î –ø—Ä–µ–≤‚Äô—é (–∫–∞—Ä—Ç–∏–Ω–∫–∞)
        has_image = "<img" in body_html

        # –Ø–∫—â–æ –Ω–µ–º–∞—î download_link, –∞–ª–µ —î .xaml-–ø–æ—Å–∏–ª–∞–Ω–Ω—è, –≤—ñ–∑—å–º–µ–º–æ –ø–µ—Ä—à–µ
        if not download_link and xaml_links:
            download_link = xaml_links[0]

        # 6) –£–Ω—ñ–∫–∞–ª—å–Ω—ñ —ñ–º–µ–Ω–∞ .xaml —Ñ–∞–π–ª—ñ–≤ (–±–µ–∑ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤)
        xaml_files_set = set()
        for link in xaml_links:
            file_match = re.search(r'/([^/]+\.xaml)', link, flags=re.IGNORECASE)
            if file_match:
                # file_name ‚Äî –æ—Å—Ç–∞–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–∞ —à–ª—è—Ö—É
                file_name = file_match.group(1)
                # –ø—Ä–∏–±–µ—Ä–µ–º–æ –ø—Ä–æ–±—ñ–ª–∏, –Ω—É–ª—å–æ–≤–æ—ó —à–∏—Ä–∏–Ω–∏ —Å–∏–º–≤–æ–ª–∏ —Ç–∞ —ñ–Ω—à–µ
                file_name = file_name.strip()
                file_name = unicodedata.normalize("NFKC", file_name)
                xaml_files_set.add(file_name)

        # –í—ñ–¥—Å–æ—Ä—Ç—É—î–º–æ, —â–æ–± –≤–∏–≥–ª—è–¥–∞–ª–æ –∞–∫—É—Ä–∞—Ç–Ω—ñ—à–µ
        xaml_files_list = sorted(xaml_files_set)
        # –Ø–∫—â–æ –Ω–µ–º–∞ –∂–æ–¥–Ω–æ–≥–æ .xaml, –ø—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ –≤–æ–Ω–æ {theme_name}.xaml
        if xaml_files_list:
            xaml_files_text = " ".join(xaml_files_list)
        else:
            xaml_files_text = f"{theme_name}.xaml *(assumed)*"

        # 7) –î–æ–¥–∞—î–º–æ –∑—ñ–±—Ä–∞–Ω—ñ –¥–∞–Ω—ñ –≤ –º–∞—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        themes.append({
            "name": theme_name,
            "xaml_files": xaml_files_text,
            "download_link": download_link,
            "author": author,
            "has_image": has_image
        })

    return themes


def update_readme_table(themes):
    """Update the README.md with theme information in a table including numbering"""
    readme_path = "README.md"

    content = [
        "# üé® Flow Launcher Themes Collection\n",
        "\n",
        "This README aggregates theme submissions shared in the [Flow Launcher Theme Gallery discussion](https://github.com/Flow-Launcher/Flow.Launcher/discussions/1438).\n",
        "\n",
        f"üì¶ **Total Themes:** {len(themes)}\n",
        "\n",
        "| üî¢ # | üé® Theme | üóÇ XAML File(s) | üì• Download | ‚úçÔ∏è Author | üñºÔ∏è Preview |\n",
        "|------|----------|------------------|--------------|------------|-----------|\n"
    ]

    for idx, theme in enumerate(themes, start=1):
        preview_status = "‚úÖ" if theme['has_image'] else ""
        safe_name = theme['name'].replace('|', '\\|')
        safe_xaml = theme['xaml_files'].replace('|', '\\|')

        if theme['download_link']:
            table_row = (
                f"| {idx} | **{safe_name}** | {safe_xaml} | "
                f"[Download]({theme['download_link']}) | {theme['author']} | {preview_status} |\n"
            )
        else:
            table_row = (
                f"| {idx} | **{safe_name}** | {safe_xaml} | "
                f"| {theme['author']} | {preview_status} |\n"
            )

        content.append(table_row)

    content.append("\n---\n\n")
    content.append(
        "*This README was automatically generated from the discussion posts on GitHub. "
        "For further details or updates, please refer to the original "
        "[Flow Launcher Theme Gallery discussion](https://github.com/Flow-Launcher/Flow.Launcher/discussions/1438).*\n"
    )

    with open(readme_path, "w", encoding="utf-8") as file:
        file.writelines(content)

    print(f"README.md updated with {len(themes)} themes in table format.")
    return True


if __name__ == "__main__":
    comments = fetch_discussion_comments()
    themes = extract_theme_info(comments)
    # –°–æ—Ä—Ç—É—î–º–æ —Ç–µ–º–∏ –∑–∞ –∞–ª—Ñ–∞–≤—ñ—Ç–æ–º
    themes.sort(key=lambda x: x['name'].lower())
    update_readme_table(themes)
